Testing file 7-base_geometry.py


Test 1: importing docstring of the file 7-base_geometry

>>> b = __import__("7-base_geometry").__doc__
>>> print(b)
This is just an empty function

Test 2: Importing docstring of the class of the file

>>> b = __import__("7-base_geometry").BaseGeometry
>>> print(b)
<class '7-base_geometry.BaseGeometry'>

Test 3: Importing docstring of function integer_validator of the class

>>> a = __import__("7-base_geometry").BaseGeometry.integer_validator.__doc__
>>> print(a)
this checks value
>>> len(a) > 1
True

Test 3: Importing docstring of function area

>>> a = __import__("7-base_geometry").BaseGeometry.area.__doc__
>>> print(a)
this raise exception that all

Test 4: Importing function integer_validator and testing it

>>> b = __import__('7-base_geometry').BaseGeometry
>>> b = b()
>>> b.integer_validator("number", 13)
>>> print(b.integer_validator("number", 13))
None

Test 5: Checking of error

>>> print(b.integer_validator("number", -1))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/root/alx-higher_level_programming/0x0A-python-inheritance/7-base_geometry.py", line 12, in integer_validator
    raise ValueError("{} must be greater than 0".format(name))
ValueError: number must be greater than 0
